{
  "name": "Dynamic Table",
  "tagline": "Dynamic Table jQuery Plug-in",
  "body": "# Dynamic Table - jQuery Plug-in\r\n\r\n## Introduction\r\n\r\nThe *Dynamic Table* is a table that displays data in a similar way to a spreadsheet\r\nbut allows the data to be loaded from your backend and control over what can be\r\nedited and how it is being saved.\r\n\r\nIt allows advanced filtering and sorting as well as interaction with your \r\napplication.\r\n\r\n## Features\r\n\r\n * Spreadsheet feel\r\n * Load data via AJAX\r\n * Paged scrolling (handles easily tens of thousands of lines)\r\n * Filters and Sorting\r\n * Editable fields\r\n * Events on select\r\n * jQuery UI based\r\n \r\n## Prerequisites\r\n\r\n * jQuery\r\n * jQuery UI\r\n * moment.js (if you are planning on displaying dates)\r\n \r\nIf you are using Bootstrap the JQuery-Bootstrap project is recommended to make \r\nthe components look more like Bootstrap.\r\n \r\n## Example\r\n\r\nTo see how the dynamic table works in production see this [working sample](https://rawgit.com/key-lime-box/dynamic-table/master/sample/index.html) that goes with the *Getting Started* section.\r\n\r\n## Getting Started\r\n\r\n### 0) Import\r\n\r\nFirst import the `dynamic-table.jquery.js` and any dependencies.\r\n\r\n### 1) Initialize Plug-in\r\n\r\nTo initialize the component select an empty element, preferably a `<div>`\r\nand apply the jQuery plug-in:\r\n\r\n```javascript\r\n    $(\"#sample-grid\").dynamicTable({\r\n        fillParent : false,\r\n        showCounter: true\r\n    });\r\n```\r\n\r\nAvailable options are:\r\n\r\n * `fillParent` (default: `true`): Automatically keeps the grid the same size as \r\n   the parent object this is usefull for any sort of full screen applications.\r\n * `showCounter` (default: `false`): Displays a counter column as the first \r\n   column, which gives the row number.\r\n * `showCheck` (default: `false`): Displays a checkmark at the beginning of the \r\n   row, that allows the selection of multiple rows. Only works when the counter\r\n   column is also visible.\r\n * `rowHeight` (default: `35`): The height of rows in pixels.\r\n\r\n\r\n### 2) Define Columns\r\n\r\nNext you define the columns as an array of column definitions\r\n\r\n```javascript\r\nvar myColumns = [{\r\n                    name       : \"Name\",\r\n                    type       : \"string\",\r\n                    visible    : true,\r\n                    filterType : \"search\",\r\n                    width      : 200\r\n                },\r\n                [...]\r\n                ]\r\n```\r\n\r\nAvailable options are:\r\n\r\n * `name`: The name of the column.\r\n * `type` (default: `\"string\"`) : The datatype of the columns. Options are: `string`, `date`, `number`\r\n   and `boolean`.\r\n * `field`: This is mostly for use when in the data passed in the rows are an object rather than an array, in which case this attribute is used to lookup which value to show in which cell.\r\n * `visible` (default: `false`): Whether or not the column is visible or not. This allows for\r\n   hiddend data columns, such as ID fields etc.\r\n * `filterType` (default: `list`): The type of filter to display for the column.\r\n   Options are: `list`, `search` and `dateRange`.\r\n * `width` (default: `100`): The width of the column in pixels.\r\n * `format`: The format used for columns, such as date an number columns. The\r\n   format is based on the moment.js format.\r\n * `editor`: Instance of the editor used to allow this cell to be edited.\r\n * `cssClass` : Specify a css class that is applied to this column. If a string is \r\n    supplied the class is applied to all cells in that column. Alternatively a function \r\n    can be supplied that returns the class dynamically. The function is of the following \r\n    format `function(aColumn, aValue, aDisplayValue)`. The `aColumn` parameter\r\n    gets passed the column data, the `aValue` parameter gets passed the original value\r\n    and the `aDisplayValue` gets passed the string which is to be rendered.\r\n    \r\n   \r\n### 3) Getting the data\r\n\r\nYou can get the data using an AJAX call (`$.getJSON()`) or generate it in your\r\nJavaScript.\r\n\r\nThe table takes and array of rows. These rows can be either arrays or regular objects. In case objects are supplied the `field` attribute needs to be set on the columns, so the table knows which column to map which field to.\r\n\r\nWhen the rows are arrays the table will map the field by index to the respective column.To hide items in the array, add invisible columns to the column list.\r\n\r\nSample data as array:\r\n\r\n```javascript\r\nvar myData = [\r\n   [10001, \"Bill Smith\", new Date(1956, 3, 12), \"United States\", \"Texas\", \"English\"],\r\n   [10002, \"Michael Jones\", new Date(1975, 7, 23), \"United States\", \"Florida\", \"English\"],\r\n   [10003, \"Heinz Mayer\", new Date(1972, 8, 2), \"Germany\", \"Bayern\", \"German\"],\r\n   [10004, \"Mary Miller\", new Date(1981, 1, 6), \"United States\", \"California\", \"English\"],\r\n   [10005, \"Jose Gonzalez\", new Date(1959, 1, 6), \"Mexico\", null, \"Spanish\"],\r\n];\r\n```\r\n\r\nSample data as object:\r\n\r\n```javascript\r\nvar myData = [\r\n   {id : 10001, name : \"Bill Smith\", birthDate : new Date(1956, 3, 12).getTime(), country : \"United States\", state : \"Texas\", note : \"Test\", language : \"English\"},\r\n   {id : 10002, name : \"Michael Jones\", birthDate : new Date(1975, 7, 23).getTime(), country : \"United States\", state : \"Florida\", language : \"English\"},\r\n   {id : 10003, name : \"Heinz Mayer\", birthDate : new Date(1972, 8, 2), country : \"Germany\", state : \"Bayern\", language : \"German\"},\r\n]\r\n```\r\n\r\n### 4) Putting it all together\r\n\r\nNow that we have our element on the page, our columns and our data we just need\r\nto load it all into the table:\r\n\r\n```\r\n$(\"#sample-grid\").dynamicTable(\"data\", myData, myColumns);\r\n```\r\n\r\n## Interacting with the table\r\n\r\nTo allow your application to interact with the table, it dispatches two events:\r\n\r\n * `rowSelect`: Dispatched when the row gets selected either by keyboard\r\n   interaction or single click.\r\n * `rowDoubleClick`: Dispached when the row gets double-clicked.\r\n \r\nThe `event` parameter gets a `row` property attached, which contains the original\r\ndata of the affected row.\r\n\r\n```javascript\r\n$(\"#sample-grid\").on(\"rowSelect\", function(aEvent) {\r\n    $(\"#selected-data\").html(\"You selected <strong>\" + aEvent.row[1] + \"</strong>\");     \r\n});  \r\n```\r\n\r\n## Editing content\r\n\r\nSo far we have only dealt with content loaded from the database that the user\r\ncannot interact with. \r\n\r\nThis is done by *editors*. These are not natively part of the plugin and come as\r\nseparate plug-in: `dynamic-table-editor.jquery.js`\r\n\r\nSo first you have to import this file.\r\n\r\nTo instanciate an editor call the following:\r\n\r\n```javascript\r\nvar myEditor = $(\"<div/>\").dynamicTableEditor({\r\n    type : \"text\",\r\n    editHandler: function(aData) {\r\n        // Save here:\r\n        //$.post(\r\n        //    ...\r\n        //);\r\n    }\r\n});\r\n```\r\n\r\nThe following options are available:\r\n\r\n * `type` (default: `text`): The type of editor. Available types are:\r\n    * `text`: Simple text field.\r\n    * `list`: Select list\r\n    * `date`: Datepicker\r\n * `editHandler`: The function that gets called when an edit is complete. This\r\n   is the point where you save the data back to the server or wherever.\r\n   This function gets called with two arguments: \r\n    * `value`: The value of the editor\r\n    * `context`: Object that contains data on the current column and row.\r\n\r\nFor `list` editors only:\r\n\r\n * `values`: A list of values to be rendered into the list.\r\n * `firstBlank` (default: `true`): Whether to render the first item of the list as blank item.\r\n * `idProperty`: If the values are a complex object, this defines which property\r\n   is the ID that gets returned when selected.\r\n * `nameProperty`: If the values are a complex object, this defines which property\r\n   is the name that gets shown\r\n\r\nSample `list` editor:\r\n\r\n```javascript\r\nvar myEditor = $(\"<div/>\").dynamicTableEditor({\r\n    type : \"list\",\r\n    values : [{id : 1, name : \"Option #1\"}, {id : 2, name : \"Option #2\"}, {id : 3, name : \"Option #3\"}],\r\n    idProperty : \"id\",\r\n    nameProperty : \"name\",\r\n    editHandler: function(aData) {\r\n        // ...\r\n    }\r\n});\r\n```\r\n\r\n \r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}